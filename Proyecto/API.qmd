---
subtitle: API
format: 
  pdf:
    theme: cosmo    
    geometry: 
      - top=30mm
      - left=25mm
    fontsize: 10pt
    code-line-numbers: true
    code-block-border-left: true
    fig-align: center
---
## *Librerias a utilizar*
```{python}
import pandas as pd
import sqlite3
from flask import Flask, jsonify
import os
```

## *Base de Datos local y Endpoint*
```{python}
app = Flask(__name__)

def inicializar_bd():
    try:
        directorio_actual = os.getcwd()
        os.chdir(directorio_actual)
# Lectura del archivo CSV.
        df = pd.read_csv('Country_data.csv')
# Conecta a la base de datos SQLite.
        conn = sqlite3.connect('World.db')
# Crea la tabla 'Country' a partir de los datos extraidos con el web scraping.
        df.to_sql('Country', conn, if_exists='replace', index=False)
        conn.close()
        print("Base de datos inicializada exitosamente")
    except Exception as e:
        print(f"Error al inicializar la base de datos: {str(e)}")

inicializar_bd()

# Establecemos la conexion con la base de datos SQL.
def obtener_conexion_bd():
    return sqlite3.connect('World.db')


# Declaracion del endpoint el cual nos proporcionara los datos del pais que querramos.
@app.route('/County/<pais>', methods=['GET'])
def obtener_pedido(pais):
    conn = obtener_conexion_bd()
    try:
# Consulta de SQL que me proporciona todos los datos del pais que deseamos obtener.
        resultado = conn.execute("SELECT * FROM Country WHERE [País] = ?", (pais,)).fetchone()
        if resultado:
# Obtiene los nombres de las columnas.
            columnas = [description[0] for description in conn.execute("SELECT * FROM Country LIMIT 1").description]
# Convierte el resultado a un diccionario.
            pedido = dict(zip(columnas, resultado))
            return jsonify(pedido)
        else:
            return jsonify({"error": "Pedido no encontrado"}), 404
    finally:
        conn.close()

if __name__ == '__main__':
# Inicia la aplicación Flask.
    app.run(debug=False, port=5000)
```